#include <iostream>
#include <vector>
#include <string>
using namespace std;



class Appointment{
	
	private:
		int phase;
		int duration;
		
	public:
		Appointment(){
			phase = 0;
			duration = 0;
		}
		
		Appointment(int p, int d){
			phase = p;
			duration = d;
		}
		
		int getPhase(){
			return phase;
		}
		
		int getDuration(){
			return duration;
		}
		
		void setPhase(int p){
			phase = p;
		}
		
		void setDuration(int d){
			duration = d;
		}
};


class Day{
	
	private:
		string Name;
		int availableHours;
		int remainingHours;
		
	public:
		
		Appointment* appointment;

		
		Day(string n){
			Name = n;
			availableHours = remainingHours = 0;
			appointment = NULL;
		}
		
		void setHours(int h){
			availableHours = remainingHours = h;
		}
		
		void setAppointment(Appointment* a){
			appointment = a;
			remainingHours = availableHours - appointment->getDuration(); 
		}
		
		string getName(){
			return Name;
		}
		
		int getAvailableHours(){
			return availableHours;
		}
		
		Appointment* getAppointment(){
			return appointment;
		}
		
		int getRemainingHours(){			
			return remainingHours;
		}
};



class Team{
	private:
		int teamNum;
		int pax;
		
	public:
		Team(){
			teamNum = 0;
			pax = 0;
		}
		
		Team(int t, int p){
			teamNum = t;
			pax = p;
		}
		
		void setTeamNum(int t){
			teamNum = t;
		}
		
		void setPax(int p){
			pax = p;
		}
		
		int getTeamNum(){
			return teamNum;
		}
		
		int getPax(){
			return pax;
		}
};


class Room{
	public:
		int roomNum;
		int capacity;
		int remainingCap;
		Team* team;
		
		Room(){
			roomNum = 0;
			remainingCap = capacity = 0;
			team = NULL;
		}
		
		Room(int r, int c){
			roomNum = r;
			remainingCap = capacity = c;
			team = NULL;
		}
		
		int getRoomNum(){
			return roomNum;
		}
		
		int getCapacity(){
			return capacity;
		}
		
		Team* getTeam(){
			return team;
		}
		
		void setCapacity(int c){
			remainingCap = capacity = c;
		}
		
		void setTeam(Team* t){
			team = t;
			remainingCap = capacity - team->getPax();
		}
		
		void setRoomNum(int r){
			roomNum = r;
		}
		
		int getRemainingCap(){
			return remainingCap;
		}
};


void nextFit(Day* p, Appointment j[], int jSize, int pSize=5){
	
	int prevIndex=0;
	bool loop = true, prompt=false;
		
	for(int i=0; i<jSize && loop == true ; i++){
				
		loop = false;		
				
		for (int x=prevIndex; x<pSize;x++){
						
			if((p[x].getRemainingHours() >= j[i].getDuration())){
				p[x].setAppointment(&j[i]);
				prevIndex = x;	
				loop = true;
				prompt = false;			
				break;
			}
			else{
				prompt=true;
			}

		}
		
		if(prompt){
			cout << "\nAppointment phase " << j[i].getPhase() << " could not be scheduled this week. Any further phases have to be scheduled after the completion of this phase." << endl;
			prompt=false;
		}
		
	}
		
}


void worstFit(Room* p, int pSize, Team j[],int jSize){
	
	int largest=p[0].getCapacity();
	int largestIndex=0;
	
	for(int i=0; i<jSize; i++){
		
		for(int x=0;x<pSize;x++){
			
			if((p[x].getCapacity() > largest) && (p[x].getCapacity() == p[x].getRemainingCap())){
				largest = p[x].getCapacity();
				largestIndex = x;
			}
			
		}
		
		if(p[largestIndex].getRemainingCap() >= j[i].getPax()){
			p[largestIndex].setTeam(&j[i]);
		}
		
		else{
			cout << endl << "Team " << j[i].getTeamNum() << " is too large to be allocated to any rooms." << endl;
		}
		
		largest=0;
		largestIndex=0;
		
	}
		
}
	

void Menu(){
	
	cout << "<<< Weekly Appointment Scheduling & Room Assignment Application >>>" << endl;
	cout << "1) Set Available Hours for the week." << endl;
	cout << "2) Set Personal Medical Treatment Sequentially (Next-Fit)." << endl;
	cout << "3) Set Rooms & Spaces." << endl;
	cout << "4) Set Treatment Teams & Assign to Rooms (Worst-Fit)." << endl;
	cout << "5) Reset all." << endl;
	cout << "6) Exit." << endl << endl;
	cout << "Option: ";
	
}


int main(){
	
	const int limit = 10;
	bool loop=true;
	int choice, numPhase, rooms, numTeams;
	Day week[] = {Day("Mon"),Day("Tue"),Day("Wed"),Day("Thu"),Day("Fri")};
	Appointment appointments[limit];
	Room roomsArr[limit];
	Team teams[limit];


	do{
		
		Menu();
		cin >> choice;
		cin.ignore();
		
		switch(choice){
			
			case 1: {
				
				int availableHours;
				
				system("cls");
				cout << "<<< Set Available Hours for the week >>>" << endl;
				for(int i=0; i<5; i++){
					cout << "Available Hours on " + week[i].getName() + ": ";
					cin >> availableHours;
					week[i].setHours(availableHours);
				}
				
				cout << endl;
				
				for(int i=0;i<5; i++){
					cout << week[i].getName() + ":" << endl;
					cout << "Available Hours: " << week[i].getAvailableHours() << endl;
					cout << "Remaining Hours: " << week[i].getRemainingHours() << endl;
					cout << endl;
				}
				
				system("pause");
				system("cls");
				break;
			}
			
			case 2: {
				
				string name;
				int duration;
				
				system("cls");
				cout << "<<< Set Personal Medical Treatment Sequentially >>>" << endl;
				cout << "Patient Name: ";
				getline(cin, name);
				
				cout << "Phases of appointments: ";
				cin >> numPhase;
				cout << endl;
				
				for(int i=0; i<numPhase; i++){
					cout << "Duration for phase " << (i+1) << " (hours): ";
					cin >> duration;
					appointments[i].setPhase(i+1);
					appointments[i].setDuration(duration);
				}
				
				
				nextFit(&week[0],appointments,numPhase);
				cout << endl;
				
				cout << "Patient: " << name << endl << endl;
				for(int i=0;i<5; i++){
					cout << week[i].getName() + ":" << endl;
					cout << "Available Hours: " << week[i].getAvailableHours() << endl;
					
					if(week[i].getAppointment() == NULL){
						cout << "Appointment Phase: N/A" << endl;
					}
					else{
						cout << "Appointment Phase: " << week[i].getAppointment()->getPhase() << endl;
					}
					cout << "Remaining Hours: " << week[i].getRemainingHours() << endl;
					cout << endl;
				}				
				
				system("pause");
				system("cls");
				break;
			}
			
			case 3: {
				system("cls");
				
				int capacity;
				
				cout << "<<< Set Rooms & Spaces >>>" << endl;
				cout << "Number of Rooms Available: ";
				cin >> rooms;
				cout << endl;
				
				for (int i=0; i<rooms; i++){
					cout << "Maximum Capacity of Room " << i+1 << " (person): ";
					cin >> capacity;
					roomsArr[i].setRoomNum(i+1);
					roomsArr[i].setCapacity(capacity);
				}
				
				cout << endl;
				
				for (int i=0; i<rooms; i++){
					cout << "Room " << i+1 << ":" << endl;
					cout << "Maximum Capacity (person): " << roomsArr[i].getCapacity() << endl;
					
					if(roomsArr[i].getTeam()==NULL){
						cout << "Team: N/A" << endl;
					}
					else{
						cout << "Team: " << roomsArr[i].getTeam()->getTeamNum() << endl;
					}
					cout << "Remaining Capacity (person): " << roomsArr[i].getRemainingCap() << endl;
					cout << endl;
				}				
				
				system("pause");
				system("cls");
				break;
			}
			
			case 4: {
				system("cls");
				int members;
				
				cout << "<<< Set Treatment Teams & Assign to Rooms >>>" << endl;
				cout << "Number of Treatment Teams: ";
				cin >> numTeams;
				cout << endl;
				
				for(int i=0; i<numTeams; i++){
					cout << "Members in Treatment Team " << i+1 << ": ";
					cin >> members;
					teams[i].setTeamNum(i+1);
					teams[i].setPax(members);
				}
				
				worstFit(&roomsArr[0],rooms,teams,numTeams);
				cout << endl;
				
				for (int i=0; i<rooms; i++){
					cout << "Room " << i+1 << ":" << endl;
					cout << "Maximum Capacity (person): " << roomsArr[i].getCapacity() << endl;
					
					if(roomsArr[i].getTeam()==NULL){
						cout << "Team: N/A" << endl;
					}
					else{
						cout << "Team: " << roomsArr[i].getTeam()->getTeamNum() << endl;
					}
					cout << "Remaining Capacity (person): " << roomsArr[i].getRemainingCap() << endl;
					cout << endl;
				}				
				
				
				
				system("pause");
				system("cls");
				break;
			}
			
			case 5: {
				
				for(int i=0; i<5; i++){
					week[i].appointment=NULL;
					week[i].setHours(0);
				}
				
				for(int i=0; i<limit; i++){
					appointments[i].setDuration(0);
					appointments[i].setPhase(0);
				}
				
				for(int i=0; i<limit; i++){
					teams[i].setTeamNum(0);
					teams[i].setPax(0);
				}
				
				for(int i=0; i<limit; i++){
					roomsArr[i].setCapacity(0);
					roomsArr[i].team = NULL;
				}
				
								
				cout << "\nEverything has been reset." << endl << endl;
				system("pause");
				system("cls");				
				break;
			}
			
			case 6: {
				loop = false;
				cout << "Thank you :)" << endl << endl;				
				break;
			}
			
			default: {
				cout << "Invalid option! Please try again." << endl << endl;
				system("pause");
				system("CLS");
				break;
			}
		}
		
	}while(loop);

	system("pause");
	return 0;

}
